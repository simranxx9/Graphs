#include<bits/stdc++.h>
using namespace std;
void dfs(vector<vector<int>> adj[], int node, vector<int> &visited, stack<int> &s)
{
    visited[node] = 1;
    for(auto it: adj[node])
    {
        int v = it[0];
        int w = it[1];
        if(!visited[v])
        {
            dfs(adj, v, visited, s);
        }
    }
    s.push(node);
}


vector<int> dfs_short(int V, vector<vector<int>> adj[])
{
    vector<int> v;
    stack<int> s;   // for topo short with dfs
    vector<int> visited(V, 0);
    // for topo sort
    for(int i = 0;i <V;i ++ )
    {
        if(!visited[i])
        {
            dfs(adj, i, visited, s);
        }
    }
    // for mini distance
    vector<int> dist(V,INT_MAX);
    while(!s.empty())
    {
        int node = s.top();
        s.pop();
        if(node == 0) dist[node] = 0;
        for(auto it: adj[node])
        {
            int v = it[0];
            int w = it[1];
            if(dist[v] > dist[node] + w)
            {
                dist[v] = dist[node] + w;
            }
        }
    }
    return dist;
}

int main()
{
    int n, m;
    cin>>n>>m;
    vector<vector<int>> adj[n];
    int u, v, w;
    for(int i = 0; i < m; i++)
    {
        cin>>u>>v>>w;
        adj[u].push_back({v,w});
    }
    vector<int> res = dfs_short(n, adj);
    for(auto it: res)
    {
        cout<<it<<" ";
    }
    cout<<endl;
    return 0;
}
