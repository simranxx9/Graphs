// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution 
{
    public:
    
    bool check_cycle(int node, vector<int> &vis, vector<int> adj[], int V)
    {
        queue<pair<int, int>> q;
        vis[node] = 1;
        int prev = -1;
        
        q.push({node, prev});
        
        while(!q.empty())
        {
            int curr_node = q.front().first;
            
            prev = q.front().second;
            q.pop();
            
            for(int it : adj[curr_node])
            {
                if(!vis[it])
                {    q.push({it, curr_node});
                      vis[it] = 1;
                }
                else if(prev != it)
                    return true;
            }
        }
        return false;
    }
    //Function to detect cycle in an undirected graph.
	bool isCycle(int V, vector<int>adj[])
	{
	    // Code here
	    vector<int> vis(V+1, 0);
	    
	    for(int i =1 ;i<= V;i++)
	    {
	        if(!vis[i])
	        {
	            if(check_cycle(i, vis, adj, V))
	            {
	                return true;
	            }
	        }
	    }
	    return false;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isCycle(V, adj);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
